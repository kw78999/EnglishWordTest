package com.company;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Main {
    static BufferedReader br = null;
    static String path = "C:\\Users\\hblee.DI-SOLUTION\\Desktop\\EnglishWordTest\\" +
            "토접전.txt";
    static File csv = new File(path);
    static BufferedReader dap = new BufferedReader(new InputStreamReader(System.in));
    static String line = "";
    static ArrayList<List<String>> list = new ArrayList();
    static ArrayList<List<String>> word_class_list = new ArrayList();
    static int success = 0;
    static int fail = 0;
    static int cnt = 0;
    static boolean[] distinctWordFlag ;
    static boolean[] failCheck ;
    static boolean[] successCheck ;

    public static void main(String[] args) throws IOException {

        br = new BufferedReader(new FileReader(csv));
        //단어
        //level2start(br);

        //토접전
        level3start(br);
    }

    public static void level3start(BufferedReader br) throws IOException {
        while ((line = br.readLine()) != null) {

            if(line.equals("")){break;}

            List<String> aLine = new ArrayList();
            List<String> aLine2 = new ArrayList();
            String word_class_link = new String();

            String[] lineArr = line.split(",");
            String[] word_class= line.split("&");

            if(lineArr[1] == null){
                System.out.println("ERROR ------ "  + line);
                return;
            }

            for (int i =1; i<word_class.length-1; i++){
                aLine2.add(word_class[i]);
                word_class_link += word_class[i];
            }

            for (int i =0; i<lineArr.length; i++){
                if(i==1){
                    aLine.add(word_class_link);
                }else {
                    aLine.add(lineArr[i]);
                }
            }

            word_class_list.add(aLine2);
            list.add(aLine);
        }

        failCheck = new boolean[list.size()];
        distinctWordFlag = new boolean[list.size()];
        successCheck = new boolean[list.size()];

        //level2 - 순서 섞기
        level3(list.size());
    }



    public static void level2start(BufferedReader br) throws IOException {
        while ((line = br.readLine()) != null) {

            if(line.equals("")){break;}

            List<String> aLine = new ArrayList();
            String[] lineArr = line.split(",");
            if(lineArr[1] == null){
                System.out.println("ERROR ------ "  + line);
                return;
            }
            aLine.add(lineArr[0]);
            aLine.add(lineArr[1]);
            list.add(aLine);
        }

        failCheck = new boolean[list.size()];
        distinctWordFlag = new boolean[list.size()];
        successCheck = new boolean[list.size()];

        //level2 - 순서 섞기
        level2(list.size());
    }

    public static void level3(int failSize) throws IOException {
        success = 0;
        fail = 0;
        cnt = 0;
        for (int i = 0 ; i < distinctWordFlag.length; i++){
            distinctWordFlag[i] = false;
            failCheck[i] = false;
        }

        while (true){
            boolean whileCheck = true;
            int i = new Random().nextInt(list.size());

            if(distinctWordFlag[i] == false && successCheck[i] == false){
                distinctWordFlag[i]=true;
                cnt++;
            }else{
                continue;
            }

            System.out.println(list.get(i).get(0));
            String dapStr = dap.readLine();

            if(list.get(i).get(1).trim().equals(dapStr)){ // while : 접접명동
                System.out.println("---------------------------정답");
                boolean lastCheck = true;
                for (int k=0; k<word_class_list.get(i).size();k++) {  //접접 : ~반면에 ~동안에
                    System.out.println(word_class_list.get(i).get(k));
                    String dapStr2 = dap.readLine();
                    if(list.get(i).get(2+k).trim().equals(dapStr2)){
                        System.out.println("---------------------------정답");
                    }else{
                        System.out.println("---------------------------틀렸습니다.");
                        System.out.println("정답 : " + list.get(i).get(2+k).trim());
                        System.out.println("정답으로 인정하시겠습니까? 정답인정 : 1     오답인정 : 2");
                        String check = dap.readLine();
                        if(check.equals("1")){
                            System.out.println("---------------------------정답");
                        }else{
                            System.out.println("---------------------------틀렸습니다.");
                            lastCheck=false;
                            break;
                        }
                    }
                }

                if(lastCheck==true){
                    System.out.println();
                    System.out.println("---------------------------  " + list.get(i).get(0) + "  정답");
                    success++;
                    successCheck[i] = true;
                }else{
                    fail++;
                    failCheck[i] = true;
                }

            }else{
                System.out.println("---------------------------틀렸습니다.");
                System.out.println("정답 : " + list.get(i).get(1));

                System.out.println("정답으로 인정하시겠습니까? 정답인정 : 1     오답인정 : 2");
                String check = dap.readLine();
                if(check.equals("1")){
                    System.out.println("---------------------------정답");
                    boolean lastCheck = true;
                    for (int k=0; k<word_class_list.get(i).size();k++) {  //접접 : ~반면에 ~동안에
                        System.out.println(word_class_list.get(i).get(k));
                        String dapStr2 = dap.readLine();
                        if(list.get(i).get(2+k).trim().equals(dapStr2)){
                            System.out.println("---------------------------정답");
                        }else{
                            System.out.println("---------------------------틀렸습니다.");
                            System.out.println("정답 : " + list.get(i).get(2+k).trim());
                            System.out.println("정답으로 인정하시겠습니까? 정답인정 : 1     오답인정 : 2");
                            String check2 = dap.readLine();
                            if(check2.equals("1")){
                                System.out.println("---------------------------정답");
                            }else{
                                System.out.println("---------------------------틀렸습니다.");
                                lastCheck=false;
                                break;
                            }
                        }
                    }

                    if(lastCheck==true){
                        System.out.println();
                        System.out.println("---------------------------  " + list.get(i).get(0) + "  정답");
                        success++;
                        successCheck[i] = true;
                    }else{
                        fail++;
                        failCheck[i] = true;
                    }

                }else{
                    System.out.println("---------------------------틀렸습니다.");
                    fail++;
                    failCheck[i] = true;
                }
            }

            for (int k=0; k<list.size(); k++){
                if(successCheck[k]==false && failCheck[k]==false){
                    whileCheck=false;
                    break;
                }
            }

            if(whileCheck==true)break;
            System.out.println("진행률 : "+cnt + " / " + failSize);
            System.out.println();
        }

        boolean flag=true;
        for (int i = 0; i<successCheck.length; i++){
            if(successCheck[i]==false){
                flag=false;
            }
        }
        int failSizeInteger=0;
        for (int i = 0; i<failCheck.length; i++){
            if(failCheck[i]==true){
                failSizeInteger++;
            }
        }

        if(failSize!=0){ end(failSize);}

        if(flag==false){
            for(int c = 0; c< 15; c++){
                System.out.println();
            }

            System.out.println("준비되었으면 무엇이든 입력해주세요.");
            System.out.println(failSizeInteger);
            if(dap.readLine()!=null) level3(failSizeInteger);
        }else{
            System.out.println("TOEIC can't beat me.");
            return;
        }
    }


    public static void level2(int failSize){
        success=0;
        fail=0;
        cnt=0;

        for (int i = 0 ; i < distinctWordFlag.length; i++){
            distinctWordFlag[i] = false;
            failCheck[i] = false;
        }

        try {
            while (true){
                boolean whileCheck = true;
                int i = new Random().nextInt(list.size());

                if(distinctWordFlag[i] == false && successCheck[i] == false){
                    distinctWordFlag[i]=true;
                    cnt++;
                }else{
                    continue;
                }

                System.out.println(list.get(i).get(0));
                String dapStr = dap.readLine();

                if(list.get(i).get(1).trim().equals(dapStr)){
                    System.out.println("---------------------------정답");
                    success++;
                    successCheck[i] = true;
                }else{
                    System.out.println("---------------------------틀렸습니다.");
                    System.out.println("정답 : " + list.get(i).get(1).trim());
                    System.out.println("정답으로 인정하시겠습니까? 정답인정 : 1     오답인정 : 2");
                    String check = dap.readLine();
                    if(check.equals("1")){
                        System.out.println("---------------------------정답");
                        success++;
                        successCheck[i] = true;
                    }else{
                        System.out.println("---------------------------틀렸습니다.");
                        fail++;
                        failCheck[i] = true;
                    }
                }

                for (int k=0; k<list.size(); k++){
                    if(successCheck[k]==false && failCheck[k]==false){
                        whileCheck=false;
                        break;
                    }
                }
                if(whileCheck==true)break;
                System.out.println("진행률 : "+cnt + " / " + failSize);
                System.out.println();
            }

            boolean flag=true;
            for (int i = 0; i<successCheck.length; i++){
                if(successCheck[i]==false){
                    flag=false;
                }
            }
            int failSizeInteger=0;
            for (int i = 0; i<failCheck.length; i++){
                if(failCheck[i]==true){
                    failSizeInteger++;
                }
            }

            if(failSize!=0){ end(failSize);}

            if(flag==false){
                for(int c = 0; c< 15; c++){
                    System.out.println();
                }

                System.out.println("준비되었으면 무엇이든 입력해주세요.");
                if(dap.readLine()!=null) level2(failSizeInteger);
            }else{
                System.out.println("TOEIC can't beat me.");
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void end(int failSize){
        System.out.println();
        System.out.println("------Fail List 입니다.-------");
        for (int i = 0; i < list.size(); i++){
            if(failCheck[i] == true){
                System.out.println(list.get(i));
            }
        }
        System.out.println();
        System.out.println("점수 : "+success + " / " + failSize  + "   틀린 개수 : " + fail + " / " + failSize);
    }


}
